# --------------------------------------------
# 제목 (50자 이내, Subject)
# --------------------------------------------
# 제목은 type과 함께 작성합니다.
# 명령조로 작성하며, 문장보다는 구문으로 작성합니다.
# 끝에 마침표(.)를 사용하지 않습니다.
# Commit Type의 첫 글자는 대문자입니다.
# --------------------------------------------
# Commit Type | 설명
# --------------------------------------------
# FEAT       |  새로운 기능 추가
# FIX        |  버그 수정
# DOCS       |  문서 수정
# RRFACTOR   |  코드 리펙토링
# CHORE      |  기타 변경사항
# TEST       |  테스트(테스트 코드 추가, 수정, 삭제)
# RENAME     |  파일 혹은 폴더명 수정하거나 옮기는 경우
# REMOVE     |  파일을 삭제하는 작업만 수행하는 경우
# 예: [FEAT] .gitignore 추가

# 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)

# -------------------------------------------
# 본문 (선택, 72자 이내로 작성 권장, Body)
# -------------------------------------------
# 변경 사항의 이유, 상세 내용, 해결 방법 등을 설명합니다.
# 본문은 선택 사항입니다.
# 커밋에 대한 맥락과 부연 설명이 필요할 때만 작성합니다.
# 예 : __pycache__ 추가하여 불필요한 파일을 Git에서 제외하도록 설정했습니다.

# --------------------------------------------
# 꼬리말 (Footer)
# 관련된 이슈나 참고 사항이 있다면 추가합니다.
# Issue Tracker: #이슈 번호 형식으로 작성합니다.
# 여러 개의 이슈 번호를 적을 때는 쉼표로 구분합니다.
# --------------------------------------------
# Issue Tracker | 설명
# --------------------------------------------
# Fixes         |  이슈 수정 중 (해결 X)
# Resolves      |  이슈를 해결한 경우
# Ref           |  참조할 이슈가 있을 때 사용
# Related to    |  해당 커밋에 관련된 이슈 번호
# --------------------------------------------
# 예: Fixes: #123 Related to #124, #125
